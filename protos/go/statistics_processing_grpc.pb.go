// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StatisticsProcesserClient is the client API for StatisticsProcesser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsProcesserClient interface {
	ProcessDocument(ctx context.Context, in *ProcessDocumentRequest, opts ...grpc.CallOption) (*ProcessDocumentReply, error)
}

type statisticsProcesserClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsProcesserClient(cc grpc.ClientConnInterface) StatisticsProcesserClient {
	return &statisticsProcesserClient{cc}
}

func (c *statisticsProcesserClient) ProcessDocument(ctx context.Context, in *ProcessDocumentRequest, opts ...grpc.CallOption) (*ProcessDocumentReply, error) {
	out := new(ProcessDocumentReply)
	err := c.cc.Invoke(ctx, "/statisticsprocessing.StatisticsProcesser/ProcessDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsProcesserServer is the server API for StatisticsProcesser service.
// All implementations must embed UnimplementedStatisticsProcesserServer
// for forward compatibility
type StatisticsProcesserServer interface {
	ProcessDocument(context.Context, *ProcessDocumentRequest) (*ProcessDocumentReply, error)
	mustEmbedUnimplementedStatisticsProcesserServer()
}

// UnimplementedStatisticsProcesserServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsProcesserServer struct {
}

func (UnimplementedStatisticsProcesserServer) ProcessDocument(context.Context, *ProcessDocumentRequest) (*ProcessDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocument not implemented")
}
func (UnimplementedStatisticsProcesserServer) mustEmbedUnimplementedStatisticsProcesserServer() {}

// UnsafeStatisticsProcesserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsProcesserServer will
// result in compilation errors.
type UnsafeStatisticsProcesserServer interface {
	mustEmbedUnimplementedStatisticsProcesserServer()
}

func RegisterStatisticsProcesserServer(s grpc.ServiceRegistrar, srv StatisticsProcesserServer) {
	s.RegisterService(&_StatisticsProcesser_serviceDesc, srv)
}

func _StatisticsProcesser_ProcessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsProcesserServer).ProcessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statisticsprocessing.StatisticsProcesser/ProcessDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsProcesserServer).ProcessDocument(ctx, req.(*ProcessDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatisticsProcesser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statisticsprocessing.StatisticsProcesser",
	HandlerType: (*StatisticsProcesserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDocument",
			Handler:    _StatisticsProcesser_ProcessDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/statistics_processing.proto",
}
